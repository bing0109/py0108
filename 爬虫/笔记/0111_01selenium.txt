
Selenium是一个自动化测试工具，利用它可以驱动浏览器来执行特定的动作，如点击、下拉等操作，同时还可以获取浏览器当前呈现的代码，做到所见即所得。对于一些JavaSript动态渲染的页面来说，此种方法非常有效。

安装
    模块：pip install selenium
    浏览器驱动：参考 https://blog.csdn.net/huilan_same/article/details/51896672
    
    配置，Ubuntu下把webdriver文件移动到/usr/bin/目录下就行
    

用法
    from selenium import webdriver
    browser = webdriver.Chrome()            #打开浏览器
    browser.get('https://www.baidu.com/')   #url输入并访问百度网址

        Selenium支持非常多的浏览器，如Chrome、Firefox、Edge等，还有Android、BlackBerry等手机端的浏览器。另外，也支持无界面浏览器PhantomJS。google也由无界面的用法
        #browser = webdriver.Firefox()
        #browser = webdriver.Edge()
        #browser = webdriver.Android()
        #browser = webdriver.Safari()
        #browser = webdriver.PhantomJS()




访问网页
    以通过get()方法访问相应的网站，参数传入相应的url。
    另外，可以通过page_source获得经过JavaScript渲染之后的html代码。
    html = browser.page_source

定位元素
    定位单个元素
        browser.find_element_by_id()
        browser.find_element_by_name()
        browser.find_element_by_link_text()
        browser.find_element_by_tag_name()
        browser.find_element_by_class_name()
        browser.find_element_by css_selector()
        browser.find_element_by_xpath()
        browser.find_element
    定位多个元素
        browser.find_elements_by_id()
        browser.find_elements_by_name()
        browser.find_elements_by_link_text()
        browser.find_elements_by_tag_name()
        browser.find_elements_by_class_name()
        browser.find_elements_by css_selector()
        browser.find_elements_by_xpath()
        browser.find_elements
    
    

节点交互
    输入清空文本信息
        input = browser.find_element(By.CSS_SELECTOR,'#q')
        input.send_keys('人工智能')
        input.clear()   # 清空
    点击操作
        btn = browser.find_element_by_css_selector('#J_TSearchForm > div.search-button > button')
        button.click()      #点击
    
    
动作链
    一些操作，它们没有特定的执行对象，比如鼠标拖曳、键盘按键等，这些动作用另一种方式来执行，那就是动作链。
    from selenium.webdriver import ActionChains
    browser = webdriver.Chrome()
    url = 'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'
    browser.get(url)
    browser.switch_to.frame('iframeResult')
    source = browser.find_element_by_css_selector('#draggable')
    target = browser.find_element_by_css_selector('#droppable')
    actions = ActionChains(browser)         #声明动作链
    actions.drag_and_drop(source, target)   
    actions.perform()                       # 执行动作链
    
    
执行js脚本
    browser.execute_script('window.scrollTo(0, 1000)')  拉动滚动条
    browser.execute_script('alert("已经到底了！")')


获取节信息
    获取属性，名称等
    cc = browser.find_element_by_css_selector('#id')
    print(cc.get_attribute('name'))     # 获取cc的name属性的值
    print(cc.text)      #获取文本信息
    print(cc.id)        # 获取id
    print(cc.location)  # 获取位置
    print(cc.tag_name)  # 获取标签名称
    print(cc.size)      # 获取大小


延时等待
    隐式等待、显示等待

    隐式等待
        当使用隐式等待执行测试的时候，如果Selenium没有在DOM中找到节点，将继续等待，超出设定时间后，则抛出找不到节点的异常。换句话说，当查找节点而节点并没有立即出现的时候，隐式等待将等待一段时间再查找DOM，默认的时间是0。隐式等待的效果其实并没有那么好，因为我们只规定了一个固定时间，而页面的加载时间会受到网络条件的影响。
        browser.implicitly_wait(10)
    
    显示等待
        定要查找的节点，然后指定一个最长等待时间。如果在规定时间内加载出来了这个节点，就返回查找的节点；如果到了规定时间依然没有加载出该节点，则抛出超时异常。
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        browser = webdriver.Chrome()
        browser.get('https://www.taobao.com/')
        wait = WebDriverWait(browser, 10)#设置显式等待时间
        inputs = wait.until(EC.presence_of_element_located((By.ID, 'qqqqq')))
        button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, '.img-wrapper')))

        关于等待条件，
            EC.element_to_be_clickable	    节点可点击
            EC.presence_of_element_located	节点加载出来，传入定位元组，如(By.ID, 'p')
            EC.text_to_be_present_in_element    #判断某个节点是否包含某个文本
        
前进、后退
    browser.back()      # 后退
    browser.forward()   # 前进


cookies
    browser.get_cookies()       获取cookies
    browser.add_cookies()       添加cookies
    browser.delete_all_cookies()删除所有cookies


选项卡管理
    browser.execute_script('window.open()')#打开一个选项卡
    print(browser.window_handles)
    browser.switch_to_window(browser.window_handles[1])#切换到1
    browser.switch_to_window(browser.window_handles[0])



异常处理
    from selenium.common.exceptions import TimeoutException
    from selenium.common.exceptions import NoSuchElementException
    from selenium.common.exceptions StaleElementReferenceException
    
    TimeoutException
        # 超时异常，出现在显示等待超时后
    NoSuchElementException
        # find_element(s)没有查到到节点时抛出的异常
    StaleElementReferenceException
        # 主要出现在js渲染时，已经查到的节点进行交互时，出现失焦，抛出的异常















